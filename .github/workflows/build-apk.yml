name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, creation ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        env:
          SKIP_JDK_VERSION_CHECK: true

      - name: Install Cordova
        run: |
          npm install -g cordova

      - name: Create Cordova project
        run: |
          cordova create bgcatalog-app org.example.bgcatalog BGCatalog
          cd bgcatalog-app
          cordova platform add android

      - name: Create app content
        run: |
          cd bgcatalog-app/www
          
          # Create main HTML
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>BGCatalog</title>
              <link rel="stylesheet" href="css/index.css">
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
              <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
          </head>
          <body>
              <!-- Home Screen -->
              <div id="home-screen" class="screen">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('settings')">
                          <span class="material-icons">menu</span>
                      </button>
                      <h1>BGCatalog</h1>
                      <button class="icon-btn" onclick="showScreen('item-form')">
                          <span class="material-icons">add</span>
                      </button>
                  </header>
                  
                  <div class="content">
                      <input type="text" id="search-field" placeholder="Search by title or barcode" oninput="filterItems(this.value)">
                      
                      <div id="items-list" class="items-list">
                          <!-- Items will be dynamically added here -->
                      </div>
                      
                      <div class="bottom-buttons">
                          <button onclick="showScreen('review')">Review</button>
                          <button onclick="showScreen('inventory')">Inventory</button>
                          <button onclick="showScreen('export')">Export</button>
                      </div>
                  </div>
              </div>

              <!-- Item Form Screen -->
              <div id="item-form" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>New Item</h1>
                      <button class="icon-btn" onclick="startBarcodeScanner()">
                          <span class="material-icons">qr_code_scanner</span>
                      </button>
                  </header>
                  
                  <div class="content">
                      <div class="form-group">
                          <div class="barcode-section">
                              <input type="text" id="barcode" placeholder="Barcode will appear here" oninput="onBarcodeInput(this.value)">
                              <div class="barcode-buttons">
                                  <button type="button" onclick="startBarcodeScanner()" class="scan-btn">
                                      <span class="material-icons">qr_code_scanner</span> Try Camera Scanner
                                  </button>
                                  <button type="button" onclick="openBarcodeInput()" class="manual-btn">
                                      <span class="material-icons">edit</span> Enter Manually
                                  </button>
                              </div>
                              <button type="button" onclick="searchBGG()" class="bgg-btn" id="bgg-search-btn" disabled>
                                  ðŸŽ² Search BGG
                              </button>
                              <div class="barcode-hint">
                                  <small>ðŸ’¡ Tip: If camera doesn't work in browser, it will work better in the APK app!</small>
                              </div>
                          </div>
                          <div id="bgg-loading" class="loading hidden">Searching BGG...</div>
                          <div id="bgg-results" class="bgg-results hidden"></div>
                          
                          <input type="text" id="title" placeholder="Title*" required>
                          <select id="category" required>
                              <option value="">Category*</option>
                              <option value="boardgame">Board Game</option>
                              <option value="furniture">Furniture</option>
                              <option value="kitchen">Kitchen</option>
                              <option value="others">Others</option>
                          </select>
                          <select id="condition" required>
                              <option value="">Condition*</option>
                              <option value="new">New</option>
                              <option value="good">Good</option>
                              <option value="acceptable">Acceptable</option>
                              <option value="poor">Poor</option>
                          </select>
                          <input type="number" id="reference-price" placeholder="Reference Price* (â‚¬)" step="0.01" required>
                          <input type="number" id="price-rule" placeholder="Price Rule (%)" value="-50">
                          <input type="number" id="final-price" placeholder="Final Price* (â‚¬)" step="0.01" required>
                          <input type="number" id="stock" placeholder="Stock Qty*" required>
                          <input type="number" id="sold" placeholder="Sold Qty" value="0">
                          <textarea id="notes" placeholder="Notes"></textarea>
                          <button onclick="saveItem()" class="save-btn">Save Item</button>
                      </div>
                  </div>
              </div>

              <!-- Review Screen -->
              <div id="review" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Review Items</h1>
                  </header>
                  
                  <div class="content">
                      <div id="review-list" class="items-list">
                          <!-- Review items will be shown here -->
                      </div>
                  </div>
              </div>

              <!-- Inventory Screen -->
              <div id="inventory" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Inventory</h1>
                  </header>
                  
                  <div class="content">
                      <div id="inventory-list" class="items-list">
                          <!-- Inventory items will be shown here -->
                      </div>
                  </div>
              </div>

              <!-- Export Screen -->
              <div id="export" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Export</h1>
                  </header>
                  
                  <div class="content">
                      <div class="export-options">
                          <button onclick="exportToSheets()" class="export-btn">Export to Google Sheets</button>
                          <button onclick="exportToJSON()" class="export-btn">Export to JSON</button>
                          <button onclick="importFromJSON()" class="export-btn">Import from JSON</button>
                      </div>
                      <div id="export-status"></div>
                  </div>
              </div>

              <!-- Settings Screen -->
              <div id="settings" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Settings</h1>
                  </header>
                  
                  <div class="content">
                      <div class="form-group">
                          <input type="url" id="script-url" placeholder="Apps Script URL">
                          <input type="number" id="image-quality" placeholder="Image Quality (1-100)" min="1" max="100" value="80">
                          <button onclick="saveSettings()" class="save-btn">Save Settings</button>
                      </div>
                  </div>
              </div>

              <!-- Camera Scanner Modal -->
              <div id="scanner-modal" class="modal hidden">
                  <div class="modal-content">
                      <div class="scanner-header">
                          <h3>Scan Barcode</h3>
                          <button onclick="stopBarcodeScanner()" class="close-btn">
                              <span class="material-icons">close</span>
                          </button>
                      </div>
                      <div id="scanner-container">
                          <video id="scanner-video" autoplay playsinline></video>
                          <canvas id="scanner-canvas"></canvas>
                      </div>
                      <div class="scanner-controls">
                          <button onclick="toggleFlash()" class="flash-btn">
                              <span class="material-icons">flash_on</span>
                          </button>
                          <button onclick="stopBarcodeScanner()" class="cancel-btn">Cancel</button>
                      </div>
                  </div>
              </div>

              <script src="cordova.js"></script>
              <script src="js/index.js"></script>
          </body>
          </html>
          EOF

          # Create CSS
          mkdir -p css
          cat > css/index.css << 'EOF'
          * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
          }

          body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              background: #f5f5f5;
              height: 100vh;
              overflow-x: hidden;
          }

          .screen {
              height: 100vh;
              display: flex;
              flex-direction: column;
              background: white;
          }

          .screen.hidden {
              display: none;
          }

          .top-bar {
              background: #2196F3;
              color: white;
              padding: 15px;
              display: flex;
              align-items: center;
              justify-content: space-between;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }

          .top-bar h1 {
              font-size: 20px;
              font-weight: 500;
          }

          .icon-btn {
              background: none;
              border: none;
              color: white;
              padding: 8px;
              border-radius: 50%;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
          }

          .icon-btn:hover {
              background: rgba(255,255,255,0.1);
          }

          .content {
              flex: 1;
              padding: 20px;
              overflow-y: auto;
          }

          #search-field {
              width: 100%;
              padding: 15px;
              border: 1px solid #ddd;
              border-radius: 8px;
              font-size: 16px;
              margin-bottom: 20px;
          }

          .items-list {
              margin-bottom: 20px;
          }

          .item-card {
              background: white;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              padding: 15px;
              margin-bottom: 10px;
              box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }

          .item-title {
              font-weight: bold;
              color: #333;
              margin-bottom: 5px;
          }

          .item-details {
              color: #666;
              font-size: 14px;
          }

          .bottom-buttons {
              display: flex;
              gap: 10px;
              margin-top: auto;
          }

          .bottom-buttons button {
              flex: 1;
              padding: 15px;
              background: #2196F3;
              color: white;
              border: none;
              border-radius: 8px;
              font-size: 16px;
              cursor: pointer;
          }

          .bottom-buttons button:hover {
              background: #1976D2;
          }

          .form-group {
              display: flex;
              flex-direction: column;
              gap: 15px;
          }

          .form-group input,
          .form-group select,
          .form-group textarea {
              padding: 15px;
              border: 1px solid #ddd;
              border-radius: 8px;
              font-size: 16px;
          }

          .form-group textarea {
              min-height: 100px;
              resize: vertical;
          }

          .save-btn,
          .export-btn {
              background: #4CAF50;
              color: white;
              padding: 15px;
              border: none;
              border-radius: 8px;
              font-size: 16px;
              cursor: pointer;
              margin-top: 10px;
          }

          .save-btn:hover,
          .export-btn:hover {
              background: #45a049;
          }

          .export-options {
              display: flex;
              flex-direction: column;
              gap: 15px;
          }

          #export-status {
              margin-top: 20px;
              padding: 15px;
              border-radius: 8px;
              background: #e8f5e8;
              color: #2e7d32;
              display: none;
          }

          .empty-state {
              text-align: center;
              color: #666;
              padding: 40px;
          }

          .barcode-section {
              display: flex;
              flex-direction: column;
              gap: 10px;
              margin-bottom: 20px;
              padding: 15px;
              background: #f8f9fa;
              border-radius: 8px;
          }

          .barcode-buttons {
              display: flex;
              gap: 10px;
          }

          .barcode-buttons button {
              flex: 1;
          }

          .barcode-hint {
              text-align: center;
              margin-top: 5px;
              opacity: 0.8;
          }

          .barcode-hint small {
              color: #666;
              font-style: italic;
          }

          .scan-btn {
              background: #FF9800;
              color: white;
              padding: 12px;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
          }

          .scan-btn:hover {
              background: #F57C00;
          }

          .manual-btn {
              background: #607D8B;
              color: white;
              padding: 12px;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
          }

          .manual-btn:hover {
              background: #455A64;
          }

          /* Scanner Modal Styles */
          .modal {
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.9);
              z-index: 1000;
              display: flex;
              align-items: center;
              justify-content: center;
          }

          .modal.hidden {
              display: none;
          }

          .modal-content {
              background: white;
              border-radius: 12px;
              overflow: hidden;
              width: 90%;
              max-width: 400px;
              max-height: 90vh;
          }

          .scanner-header {
              background: #2196F3;
              color: white;
              padding: 15px;
              display: flex;
              align-items: center;
              justify-content: space-between;
          }

          .scanner-header h3 {
              margin: 0;
              font-size: 18px;
          }

          .close-btn {
              background: none;
              border: none;
              color: white;
              padding: 5px;
              border-radius: 50%;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
          }

          .close-btn:hover {
              background: rgba(255, 255, 255, 0.1);
          }

          #scanner-container {
              position: relative;
              width: 100%;
              height: 300px;
              overflow: hidden;
              background: #000;
          }

          #scanner-video {
              width: 100%;
              height: 100%;
              object-fit: cover;
          }

          #scanner-canvas {
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              pointer-events: none;
          }

          .scanner-controls {
              padding: 15px;
              display: flex;
              gap: 10px;
              align-items: center;
              justify-content: space-between;
          }

          .flash-btn {
              background: #FFC107;
              color: white;
              padding: 10px;
              border: none;
              border-radius: 50%;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
          }

          .flash-btn:hover {
              background: #FF9800;
          }

          .cancel-btn {
              background: #f44336;
              color: white;
              padding: 10px 20px;
              border: none;
              border-radius: 8px;
              cursor: pointer;
              font-size: 14px;
          }

          .cancel-btn:hover {
              background: #d32f2f;
          }

          .bgg-btn {
              background: #9C27B0;
              color: white;
              padding: 12px;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
          }

          .bgg-btn:hover:not(:disabled) {
              background: #7B1FA2;
          }

          .bgg-btn:disabled {
              background: #ccc;
              cursor: not-allowed;
          }

          .loading {
              text-align: center;
              padding: 20px;
              color: #666;
              font-style: italic;
          }

          .loading.hidden,
          .bgg-results.hidden {
              display: none;
          }

          .bgg-results {
              margin: 15px 0;
              padding: 15px;
              background: #e8f5e8;
              border-radius: 8px;
              border-left: 4px solid #4CAF50;
          }

          .bgg-game {
              margin-bottom: 10px;
              padding: 10px;
              background: white;
              border-radius: 5px;
              cursor: pointer;
              border: 1px solid #ddd;
          }

          .bgg-game:hover {
              background: #f5f5f5;
          }

          .bgg-game-name {
              font-weight: bold;
              color: #333;
          }

          .bgg-game-year {
              color: #666;
              font-size: 14px;
          }

          #barcode {
              background: #f0f0f0;
              font-family: monospace;
              font-weight: bold;
          }
          EOF

          # Update config.xml for network access and camera permissions
          cat > config.xml << 'EOF'
          <?xml version='1.0' encoding='utf-8'?>
          <widget id="org.example.bgcatalog" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:android="http://schemas.android.com/apk/res/android" xmlns:cdv="http://cordova.apache.org/ns/1.0">
              <name>BGCatalog</name>
              <description>Board Game Catalog App</description>
              <author email="dev@example.com" href="https://example.com">Developer</author>
              <content src="index.html" />
              <access origin="*" />
              <allow-intent href="http://*/*" />
              <allow-intent href="https://*/*" />
              <allow-intent href="tel:*" />
              <allow-intent href="sms:*" />
              <allow-intent href="mailto:*" />
              <allow-intent href="geo:*" />
              <platform name="android">
                  <allow-intent href="market:*" />
                  <preference name="AndroidXEnabled" value="true" />
                  <!-- Camera permissions -->
                  <uses-permission android:name="android.permission.CAMERA" />
                  <uses-feature android:name="android.hardware.camera" android:required="false" />
                  <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
                  <uses-feature android:name="android.hardware.camera.flash" android:required="false" />
                  <!-- Allow camera access in webview -->
                  <preference name="permissions" value="none" />
                  <preference name="AndroidInsecureFileModeEnabled" value="true" />
              </platform>
              <preference name="DisallowOverscroll" value="true" />
              <preference name="android-minSdkVersion" value="22" />
              <preference name="android-targetSdkVersion" value="33" />
              <!-- Allow camera and microphone access -->
              <feature name="http://api.phonegap.com/1.0/camera"/>
              <feature name="http://api.phonegap.com/1.0/media"/>
          </widget>
          EOF

          # Create JavaScript
          mkdir -p js
          cat > js/index.js << 'EOF'
          // Global variables
          let items = [];
          let settings = {
              scriptUrl: '',
              imageQuality: 80
          };

          // Initialize app
          document.addEventListener('deviceready', onDeviceReady, false);

          function onDeviceReady() {
              loadData();
              showItems();
              console.log('Cordova plugins ready');
          }

          // Camera Scanner Variables
          let scannerActive = false;
          let videoStream = null;

          // Barcode Scanner Functions
          async function startBarcodeScanner() {
              // Check if we're in a secure context (HTTPS or localhost)
              if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                  alert('Camera not available in this browser. Using manual input.');
                  openBarcodeInput();
                  return;
              }

              try {
                  // Show scanner modal
                  document.getElementById('scanner-modal').classList.remove('hidden');
                  
                  // Request camera permissions with fallback options
                  let constraints = { 
                      video: { 
                          facingMode: 'environment', // Use back camera
                          width: { ideal: 1280, min: 640 },
                          height: { ideal: 720, min: 480 }
                      } 
                  };

                  // Try with environment camera first
                  try {
                      videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                  } catch (envError) {
                      console.log('Environment camera failed, trying any camera...');
                      // Fallback to any available camera
                      constraints.video = { 
                          width: { ideal: 640 },
                          height: { ideal: 480 }
                      };
                      videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                  }
                  
                  const video = document.getElementById('scanner-video');
                  video.srcObject = videoStream;
                  
                  // Initialize Quagga scanner
                  initQuaggaScanner();
                  
              } catch (error) {
                  console.error('Camera access error:', error);
                  stopBarcodeScanner();
                  
                  // More user-friendly error handling
                  let errorMsg = 'Camera access failed. ';
                  if (error.name === 'NotAllowedError') {
                      errorMsg += 'Please allow camera permissions and try again.';
                  } else if (error.name === 'NotFoundError') {
                      errorMsg += 'No camera found on this device.';
                  } else if (error.name === 'NotSupportedError') {
                      errorMsg += 'Camera not supported in this browser.';
                  } else {
                      errorMsg += 'Please try manual input instead.';
                  }
                  
                  if (confirm(errorMsg + '\n\nWould you like to enter the barcode manually?')) {
                      openBarcodeInput();
                  }
              }
          }

          function initQuaggaScanner() {
              Quagga.init({
                  inputStream: {
                      name: "Live",
                      type: "LiveStream",
                      target: document.querySelector('#scanner-video'),
                      constraints: {
                          width: 640,
                          height: 480,
                          facingMode: "environment"
                      }
                  },
                  decoder: {
                      readers: [
                          "code_128_reader",
                          "ean_reader",
                          "ean_8_reader",
                          "code_39_reader",
                          "code_39_vin_reader",
                          "codabar_reader",
                          "upc_reader",
                          "upc_e_reader",
                          "i2of5_reader"
                      ]
                  },
                  locate: true,
                  locator: {
                      patchSize: "medium",
                      halfSample: true
                  }
              }, function(err) {
                  if (err) {
                      console.error('Quagga init error:', err);
                      alert('Scanner initialization failed. Using manual input.');
                      stopBarcodeScanner();
                      openBarcodeInput();
                      return;
                  }
                  
                  console.log("Quagga initialization finished. Ready to start");
                  Quagga.start();
                  scannerActive = true;
                  
                  // Listen for barcode detection
                  Quagga.onDetected(onBarcodeDetected);
              });
          }

          function onBarcodeDetected(result) {
              const code = result.codeResult.code;
              console.log('Barcode detected:', code);
              
              // Stop scanner and process result
              stopBarcodeScanner();
              handleBarcodeResult(code);
              
              // Show success feedback
              alert('Barcode scanned: ' + code);
          }

          function stopBarcodeScanner() {
              // Hide modal
              document.getElementById('scanner-modal').classList.add('hidden');
              
              // Stop Quagga
              if (scannerActive) {
                  Quagga.stop();
                  scannerActive = false;
              }
              
              // Stop video stream
              if (videoStream) {
                  videoStream.getTracks().forEach(track => track.stop());
                  videoStream = null;
              }
          }

          function toggleFlash() {
              if (videoStream) {
                  const track = videoStream.getVideoTracks()[0];
                  const capabilities = track.getCapabilities();
                  
                  if (capabilities.torch) {
                      const settings = track.getSettings();
                      track.applyConstraints({
                          advanced: [{ torch: !settings.torch }]
                      });
                  } else {
                      alert('Flash not supported on this device');
                  }
              }
          }

          function openBarcodeInput() {
              const barcode = prompt('Enter the barcode number manually:');
              if (barcode && barcode.trim()) {
                  handleBarcodeResult(barcode.trim());
              }
          }

          function scanBarcode() {
              startBarcodeScanner();
          }

          function handleBarcodeResult(barcode) {
              document.getElementById('barcode').value = barcode;
              onBarcodeInput(barcode);
          }

          function onBarcodeInput(barcode) {
              const searchBtn = document.getElementById('bgg-search-btn');
              
              if (barcode && barcode.length >= 8) {
                  searchBtn.disabled = false;
                  // Auto-search BGG if it looks like a valid barcode
                  if (barcode.length >= 12) {
                      setTimeout(() => searchBGG(), 500); // Small delay for better UX
                  }
              } else {
                  searchBtn.disabled = true;
                  document.getElementById('bgg-results').classList.add('hidden');
              }
          }

          // BGG API Functions
          async function searchBGG() {
              const barcode = document.getElementById('barcode').value;
              
              if (!barcode) {
                  alert('Please scan or enter a barcode first');
                  return;
              }

              showLoading(true);
              document.getElementById('bgg-results').classList.add('hidden');

              try {
                  // First try to search by barcode in BGG database
                  let games = await searchBGGByBarcode(barcode);
                  
                  // If no results, try searching by UPC/EAN
                  if (games.length === 0) {
                      games = await searchBGGByUPC(barcode);
                  }

                  showLoading(false);
                  displayBGGResults(games);
                  
              } catch (error) {
                  showLoading(false);
                  console.error('BGG search error:', error);
                  alert('Error searching BGG: ' + error.message);
              }
          }

          async function searchBGGByBarcode(barcode) {
              // For now, simulate BGG search with mock data
              // In a real implementation, you'd need a CORS proxy or server-side API
              return new Promise((resolve) => {
                  setTimeout(() => {
                      // Mock results based on common barcodes
                      const mockResults = [
                          { id: '1', name: 'Catan', year: '1995' },
                          { id: '2', name: 'Ticket to Ride', year: '2004' },
                          { id: '3', name: 'Splendor', year: '2014' }
                      ];
                      
                      // Return mock result if barcode looks valid
                      if (barcode.length >= 10) {
                          resolve([mockResults[0]]); // Return first game as example
                      } else {
                          resolve([]);
                      }
                  }, 1000);
              });
          }

          async function searchBGGByUPC(upc) {
              return searchBGGByBarcode(upc);
          }

          function parseBGGXML(xmlText) {
              // Simplified parsing - in production would implement full BGG XML parsing
              return [];
          }

          function showLoading(show) {
              const loading = document.getElementById('bgg-loading');
              if (show) {
                  loading.classList.remove('hidden');
              } else {
                  loading.classList.add('hidden');
              }
          }

          function displayBGGResults(games) {
              const resultsDiv = document.getElementById('bgg-results');
              
              if (games.length === 0) {
                  resultsDiv.innerHTML = '<p>No board games found with this barcode. You can still add the item manually.</p>';
                  resultsDiv.classList.remove('hidden');
                  return;
              }

              const gamesHtml = games.map(game => `
                  <div class="bgg-game" onclick="selectBGGGame('${game.name}', '${game.year}')">
                      <div class="bgg-game-name">${game.name}</div>
                      <div class="bgg-game-year">${game.year ? '(' + game.year + ')' : ''}</div>
                  </div>
              `).join('');

              resultsDiv.innerHTML = `
                  <p><strong>Found ${games.length} game(s):</strong></p>
                  ${gamesHtml}
                  <p style="font-size: 12px; margin-top: 10px; color: #666;">Tap a game to auto-fill the form</p>
              `;
              resultsDiv.classList.remove('hidden');
          }

          function selectBGGGame(name, year) {
              document.getElementById('title').value = name + (year ? ' (' + year + ')' : '');
              document.getElementById('category').value = 'boardgame';
              
              // Hide results
              document.getElementById('bgg-results').classList.add('hidden');
              
              // Focus on next field
              document.getElementById('condition').focus();
              
              alert('Game info loaded! Please fill in the remaining details.');
          }

          // Screen navigation
          function showScreen(screenId) {
              // Hide all screens
              document.querySelectorAll('.screen').forEach(screen => {
                  screen.classList.add('hidden');
              });
              
              // Show selected screen
              document.getElementById(screenId).classList.remove('hidden');
              
              // Update screen content
              if (screenId === 'home-screen') showItems();
              if (screenId === 'review') showReviewItems();
              if (screenId === 'inventory') showInventoryItems();
          }

          // Item management
          function saveItem() {
              const title = document.getElementById('title').value;
              const category = document.getElementById('category').value;
              const condition = document.getElementById('condition').value;
              const refPrice = parseFloat(document.getElementById('reference-price').value);
              const priceRule = parseInt(document.getElementById('price-rule').value);
              const finalPrice = parseFloat(document.getElementById('final-price').value);
              const stock = parseInt(document.getElementById('stock').value);
              const sold = parseInt(document.getElementById('sold').value) || 0;
              const notes = document.getElementById('notes').value;

              if (!title || !category || !condition || !refPrice || !finalPrice || !stock) {
                  alert('Please fill all required fields');
                  return;
              }

              const item = {
                  id: Date.now(),
                  title,
                  category,
                  condition,
                  referencePrice: refPrice,
                  priceRule,
                  finalPrice,
                  stock,
                  sold,
                  notes,
                  createdAt: new Date().toISOString()
              };

              items.push(item);
              saveData();
              clearForm();
              showScreen('home-screen');
              alert('Item saved successfully!');
          }

          function clearForm() {
              document.getElementById('barcode').value = '';
              document.getElementById('title').value = '';
              document.getElementById('category').value = '';
              document.getElementById('condition').value = '';
              document.getElementById('reference-price').value = '';
              document.getElementById('price-rule').value = '-50';
              document.getElementById('final-price').value = '';
              document.getElementById('stock').value = '';
              document.getElementById('sold').value = '0';
              document.getElementById('notes').value = '';
              
              // Reset BGG search
              document.getElementById('bgg-search-btn').disabled = true;
              document.getElementById('bgg-results').classList.add('hidden');
              document.getElementById('bgg-loading').classList.add('hidden');
          }

          function showItems() {
              const itemsList = document.getElementById('items-list');
              
              if (items.length === 0) {
                  itemsList.innerHTML = '<div class="empty-state">No items added yet. Tap + to add your first item!</div>';
                  return;
              }

              itemsList.innerHTML = items.map(item => `
                  <div class="item-card">
                      <div class="item-title">${item.title}</div>
                      <div class="item-details">
                          ${item.category} â€¢ ${item.condition} â€¢ â‚¬${item.finalPrice}<br>
                          Stock: ${item.stock} | Sold: ${item.sold}
                      </div>
                  </div>
              `).join('');
          }

          function showReviewItems() {
              const reviewList = document.getElementById('review-list');
              const reviewItems = items.filter(item => item.stock > 0);
              
              if (reviewItems.length === 0) {
                  reviewList.innerHTML = '<div class="empty-state">No items to review</div>';
                  return;
              }

              reviewList.innerHTML = reviewItems.map(item => `
                  <div class="item-card">
                      <div class="item-title">${item.title}</div>
                      <div class="item-details">
                          Price: â‚¬${item.referencePrice} â†’ â‚¬${item.finalPrice}<br>
                          Available: ${item.stock - item.sold} units
                      </div>
                  </div>
              `).join('');
          }

          function showInventoryItems() {
              const inventoryList = document.getElementById('inventory-list');
              
              if (items.length === 0) {
                  inventoryList.innerHTML = '<div class="empty-state">No inventory items</div>';
                  return;
              }

              const totalValue = items.reduce((sum, item) => sum + (item.finalPrice * item.stock), 0);
              
              inventoryList.innerHTML = `
                  <div class="item-card">
                      <div class="item-title">Total Inventory Value</div>
                      <div class="item-details">â‚¬${totalValue.toFixed(2)}</div>
                  </div>
                  ${items.map(item => `
                      <div class="item-card">
                          <div class="item-title">${item.title}</div>
                          <div class="item-details">
                              Stock: ${item.stock} | Value: â‚¬${(item.finalPrice * item.stock).toFixed(2)}
                          </div>
                      </div>
                  `).join('')}
              `;
          }

          function filterItems(searchText) {
              // This would filter items based on search text
              // For now, just show all items
              showItems();
          }

          // Export/Import functions
          function exportToSheets() {
              if (!settings.scriptUrl) {
                  alert('Please set Google Apps Script URL in settings first');
                  return;
              }
              
              // This would export to Google Sheets
              alert('Export to Google Sheets functionality - coming soon!');
          }

          function exportToJSON() {
              const dataStr = JSON.stringify(items, null, 2);
              const dataBlob = new Blob([dataStr], {type:'application/json'});
              
              // This would download the JSON file
              alert('Export to JSON - Data prepared!\n\nItems: ' + items.length);
          }

          function importFromJSON() {
              // This would import from JSON file
              alert('Import from JSON functionality - coming soon!');
          }

          // Settings
          function saveSettings() {
              settings.scriptUrl = document.getElementById('script-url').value;
              settings.imageQuality = parseInt(document.getElementById('image-quality').value);
              
              localStorage.setItem('bgcatalog_settings', JSON.stringify(settings));
              alert('Settings saved!');
              showScreen('home-screen');
          }

          // Data persistence
          function saveData() {
              localStorage.setItem('bgcatalog_items', JSON.stringify(items));
          }

          function loadData() {
              const savedItems = localStorage.getItem('bgcatalog_items');
              if (savedItems) {
                  items = JSON.parse(savedItems);
              }
              
              const savedSettings = localStorage.getItem('bgcatalog_settings');
              if (savedSettings) {
                  settings = JSON.parse(savedSettings);
                  document.getElementById('script-url').value = settings.scriptUrl || '';
                  document.getElementById('image-quality').value = settings.imageQuality || 80;
              }
          }
          EOF

      - name: Build APK (debug first)
        run: |
          cd bgcatalog-app
          cordova build android --debug
          
      - name: Find generated APKs
        run: |
          echo "Looking for APK files..."
          find bgcatalog-app -name "*.apk" -type f 2>/dev/null || echo "No APKs found"
          echo "Directory structure:"
          ls -la bgcatalog-app/platforms/android/app/build/outputs/ 2>/dev/null || echo "outputs directory not found"
          ls -la bgcatalog-app/platforms/android/app/build/outputs/apk/ 2>/dev/null || echo "apk directory not found"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            bgcatalog-app/platforms/android/app/build/outputs/apk/**/*.apk
            bgcatalog-app/platforms/android/app/build/outputs/apk/debug/*.apk
            bgcatalog-app/**/*.apk
          if-no-files-found: warn
