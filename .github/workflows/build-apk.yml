name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, creation ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        env:
          SKIP_JDK_VERSION_CHECK: true

      - name: Install Cordova
        run: |
          npm install -g cordova

      - name: Create Cordova project
        run: |
          cordova create bgcatalog-app org.example.bgcatalog BGCatalog
          cd bgcatalog-app
          cordova platform add android
          # Add barcode scanner plugin
          cordova plugin add phonegap-plugin-barcodescanner
          # Add camera plugin for barcode scanning
          cordova plugin add cordova-plugin-camera
          # Add network information plugin
          cordova plugin add cordova-plugin-network-information

      - name: Create app content
        run: |
          cd bgcatalog-app/www
          
          # Create main HTML
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>BGCatalog</title>
              <link rel="stylesheet" href="css/index.css">
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
          </head>
          <body>
              <!-- Home Screen -->
              <div id="home-screen" class="screen">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('settings')">
                          <span class="material-icons">menu</span>
                      </button>
                      <h1>BGCatalog</h1>
                      <button class="icon-btn" onclick="showScreen('item-form')">
                          <span class="material-icons">add</span>
                      </button>
                  </header>
                  
                  <div class="content">
                      <input type="text" id="search-field" placeholder="Search by title or barcode" oninput="filterItems(this.value)">
                      
                      <div id="items-list" class="items-list">
                          <!-- Items will be dynamically added here -->
                      </div>
                      
                      <div class="bottom-buttons">
                          <button onclick="showScreen('review')">Review</button>
                          <button onclick="showScreen('inventory')">Inventory</button>
                          <button onclick="showScreen('export')">Export</button>
                      </div>
                  </div>
              </div>

              <!-- Item Form Screen -->
              <div id="item-form" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>New Item</h1>
                      <button class="icon-btn" onclick="scanBarcode()">
                          <span class="material-icons">qr_code_scanner</span>
                      </button>
                  </header>
                  
                  <div class="content">
                      <div class="form-group">
                          <div class="barcode-section">
                              <input type="text" id="barcode" placeholder="Barcode (scan or type)" readonly>
                              <button type="button" onclick="scanBarcode()" class="scan-btn">
                                  <span class="material-icons">qr_code_scanner</span> Scan Barcode
                              </button>
                              <button type="button" onclick="searchBGG()" class="bgg-btn" id="bgg-search-btn" disabled>
                                  ðŸŽ² Search BGG
                              </button>
                          </div>
                          <div id="bgg-loading" class="loading hidden">Searching BGG...</div>
                          <div id="bgg-results" class="bgg-results hidden"></div>
                          
                          <input type="text" id="title" placeholder="Title*" required>
                          <select id="category" required>
                              <option value="">Category*</option>
                              <option value="boardgame">Board Game</option>
                              <option value="furniture">Furniture</option>
                              <option value="kitchen">Kitchen</option>
                              <option value="others">Others</option>
                          </select>
                          <select id="condition" required>
                              <option value="">Condition*</option>
                              <option value="new">New</option>
                              <option value="good">Good</option>
                              <option value="acceptable">Acceptable</option>
                              <option value="poor">Poor</option>
                          </select>
                          <input type="number" id="reference-price" placeholder="Reference Price* (â‚¬)" step="0.01" required>
                          <input type="number" id="price-rule" placeholder="Price Rule (%)" value="-50">
                          <input type="number" id="final-price" placeholder="Final Price* (â‚¬)" step="0.01" required>
                          <input type="number" id="stock" placeholder="Stock Qty*" required>
                          <input type="number" id="sold" placeholder="Sold Qty" value="0">
                          <textarea id="notes" placeholder="Notes"></textarea>
                          <button onclick="saveItem()" class="save-btn">Save Item</button>
                      </div>
                  </div>
              </div>

              <!-- Review Screen -->
              <div id="review" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Review Items</h1>
                  </header>
                  
                  <div class="content">
                      <div id="review-list" class="items-list">
                          <!-- Review items will be shown here -->
                      </div>
                  </div>
              </div>

              <!-- Inventory Screen -->
              <div id="inventory" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Inventory</h1>
                  </header>
                  
                  <div class="content">
                      <div id="inventory-list" class="items-list">
                          <!-- Inventory items will be shown here -->
                      </div>
                  </div>
              </div>

              <!-- Export Screen -->
              <div id="export" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Export</h1>
                  </header>
                  
                  <div class="content">
                      <div class="export-options">
                          <button onclick="exportToSheets()" class="export-btn">Export to Google Sheets</button>
                          <button onclick="exportToJSON()" class="export-btn">Export to JSON</button>
                          <button onclick="importFromJSON()" class="export-btn">Import from JSON</button>
                      </div>
                      <div id="export-status"></div>
                  </div>
              </div>

              <!-- Settings Screen -->
              <div id="settings" class="screen hidden">
                  <header class="top-bar">
                      <button class="icon-btn" onclick="showScreen('home-screen')">
                          <span class="material-icons">arrow_back</span>
                      </button>
                      <h1>Settings</h1>
                  </header>
                  
                  <div class="content">
                      <div class="form-group">
                          <input type="url" id="script-url" placeholder="Apps Script URL">
                          <input type="number" id="image-quality" placeholder="Image Quality (1-100)" min="1" max="100" value="80">
                          <button onclick="saveSettings()" class="save-btn">Save Settings</button>
                      </div>
                  </div>
              </div>

              <script src="cordova.js"></script>
              <script src="js/index.js"></script>
          </body>
          </html>
          EOF

          # Create CSS
          mkdir -p css
          cat > css/index.css << 'EOF'
          * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
          }

          body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              background: #f5f5f5;
              height: 100vh;
              overflow-x: hidden;
          }

          .screen {
              height: 100vh;
              display: flex;
              flex-direction: column;
              background: white;
          }

          .screen.hidden {
              display: none;
          }

          .top-bar {
              background: #2196F3;
              color: white;
              padding: 15px;
              display: flex;
              align-items: center;
              justify-content: space-between;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }

          .top-bar h1 {
              font-size: 20px;
              font-weight: 500;
          }

          .icon-btn {
              background: none;
              border: none;
              color: white;
              padding: 8px;
              border-radius: 50%;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
          }

          .icon-btn:hover {
              background: rgba(255,255,255,0.1);
          }

          .content {
              flex: 1;
              padding: 20px;
              overflow-y: auto;
          }

          #search-field {
              width: 100%;
              padding: 15px;
              border: 1px solid #ddd;
              border-radius: 8px;
              font-size: 16px;
              margin-bottom: 20px;
          }

          .items-list {
              margin-bottom: 20px;
          }

          .item-card {
              background: white;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              padding: 15px;
              margin-bottom: 10px;
              box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }

          .item-title {
              font-weight: bold;
              color: #333;
              margin-bottom: 5px;
          }

          .item-details {
              color: #666;
              font-size: 14px;
          }

          .bottom-buttons {
              display: flex;
              gap: 10px;
              margin-top: auto;
          }

          .bottom-buttons button {
              flex: 1;
              padding: 15px;
              background: #2196F3;
              color: white;
              border: none;
              border-radius: 8px;
              font-size: 16px;
              cursor: pointer;
          }

          .bottom-buttons button:hover {
              background: #1976D2;
          }

          .form-group {
              display: flex;
              flex-direction: column;
              gap: 15px;
          }

          .form-group input,
          .form-group select,
          .form-group textarea {
              padding: 15px;
              border: 1px solid #ddd;
              border-radius: 8px;
              font-size: 16px;
          }

          .form-group textarea {
              min-height: 100px;
              resize: vertical;
          }

          .save-btn,
          .export-btn {
              background: #4CAF50;
              color: white;
              padding: 15px;
              border: none;
              border-radius: 8px;
              font-size: 16px;
              cursor: pointer;
              margin-top: 10px;
          }

          .save-btn:hover,
          .export-btn:hover {
              background: #45a049;
          }

          .export-options {
              display: flex;
              flex-direction: column;
              gap: 15px;
          }

          #export-status {
              margin-top: 20px;
              padding: 15px;
              border-radius: 8px;
              background: #e8f5e8;
              color: #2e7d32;
              display: none;
          }

          .empty-state {
              text-align: center;
              color: #666;
              padding: 40px;
          }

          .barcode-section {
              display: flex;
              flex-direction: column;
              gap: 10px;
              margin-bottom: 20px;
              padding: 15px;
              background: #f8f9fa;
              border-radius: 8px;
          }

          .scan-btn {
              background: #FF9800;
              color: white;
              padding: 12px;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
          }

          .scan-btn:hover {
              background: #F57C00;
          }

          .bgg-btn {
              background: #9C27B0;
              color: white;
              padding: 12px;
              border: none;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
          }

          .bgg-btn:hover:not(:disabled) {
              background: #7B1FA2;
          }

          .bgg-btn:disabled {
              background: #ccc;
              cursor: not-allowed;
          }

          .loading {
              text-align: center;
              padding: 20px;
              color: #666;
              font-style: italic;
          }

          .loading.hidden,
          .bgg-results.hidden {
              display: none;
          }

          .bgg-results {
              margin: 15px 0;
              padding: 15px;
              background: #e8f5e8;
              border-radius: 8px;
              border-left: 4px solid #4CAF50;
          }

          .bgg-game {
              margin-bottom: 10px;
              padding: 10px;
              background: white;
              border-radius: 5px;
              cursor: pointer;
              border: 1px solid #ddd;
          }

          .bgg-game:hover {
              background: #f5f5f5;
          }

          .bgg-game-name {
              font-weight: bold;
              color: #333;
          }

          .bgg-game-year {
              color: #666;
              font-size: 14px;
          }

          #barcode {
              background: #f0f0f0;
              font-family: monospace;
              font-weight: bold;
          }
          EOF

          # Create JavaScript
          mkdir -p js
          cat > js/index.js << 'EOF'
          // Global variables
          let items = [];
          let settings = {
              scriptUrl: '',
              imageQuality: 80
          };

          // Initialize app
          document.addEventListener('deviceready', onDeviceReady, false);

          function onDeviceReady() {
              loadData();
              showItems();
              console.log('Cordova plugins ready');
          }

          // Barcode Scanner Functions
          function scanBarcode() {
              if (typeof cordova === 'undefined') {
                  // For testing in browser
                  const testBarcode = prompt('Enter barcode for testing:');
                  if (testBarcode) {
                      handleBarcodeResult(testBarcode);
                  }
                  return;
              }

              cordova.plugins.barcodeScanner.scan(
                  function (result) {
                      if (!result.cancelled) {
                          handleBarcodeResult(result.text);
                      }
                  },
                  function (error) {
                      alert('Scanning failed: ' + error);
                  },
                  {
                      preferFrontCamera: false,
                      showFlipCameraButton: true,
                      showTorchButton: true,
                      torchOn: false,
                      saveHistory: true,
                      prompt: "Place a barcode inside the scan area",
                      resultDisplayDuration: 500,
                      formats: "QR_CODE,PDF_417,EAN_13,EAN_8,UPC_A,UPC_E,CODE_128,CODE_39,CODE_93,CODABAR,ITF,RSS14,RSS_EXPANDED",
                      orientation: "landscape",
                      disableAnimations: true,
                      disableSuccessBeep: false
                  }
              );
          }

          function handleBarcodeResult(barcode) {
              document.getElementById('barcode').value = barcode;
              document.getElementById('bgg-search-btn').disabled = false;
              
              // Auto-search BGG if it's a board game barcode (typically 13 digits)
              if (barcode.length >= 10) {
                  searchBGG();
              }
          }

          // BGG API Functions
          async function searchBGG() {
              const barcode = document.getElementById('barcode').value;
              
              if (!barcode) {
                  alert('Please scan or enter a barcode first');
                  return;
              }

              showLoading(true);
              document.getElementById('bgg-results').classList.add('hidden');

              try {
                  // First try to search by barcode in BGG database
                  let games = await searchBGGByBarcode(barcode);
                  
                  // If no results, try searching by UPC/EAN
                  if (games.length === 0) {
                      games = await searchBGGByUPC(barcode);
                  }

                  showLoading(false);
                  displayBGGResults(games);
                  
              } catch (error) {
                  showLoading(false);
                  console.error('BGG search error:', error);
                  alert('Error searching BGG: ' + error.message);
              }
          }

          async function searchBGGByBarcode(barcode) {
              // BGG XML API search
              const searchUrl = `https://boardgamegeek.com/xmlapi2/search?query=${barcode}&type=boardgame`;
              
              try {
                  const response = await fetch(searchUrl);
                  const xmlText = await response.text();
                  return parseBGGXML(xmlText);
              } catch (error) {
                  console.error('BGG API error:', error);
                  return [];
              }
          }

          async function searchBGGByUPC(upc) {
              // Try alternate search methods for UPC
              const searchUrl = `https://boardgamegeek.com/xmlapi2/search?query=${upc}&type=boardgame`;
              
              try {
                  const response = await fetch(searchUrl);
                  const xmlText = await response.text();
                  return parseBGGXML(xmlText);
              } catch (error) {
                  console.error('BGG UPC search error:', error);
                  return [];
              }
          }

          function parseBGGXML(xmlText) {
              try {
                  const parser = new DOMParser();
                  const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
                  const items = xmlDoc.getElementsByTagName('item');
                  
                  const games = [];
                  for (let i = 0; i < items.length && i < 5; i++) {
                      const item = items[i];
                      const name = item.getElementsByTagName('name')[0]?.getAttribute('value') || 'Unknown';
                      const year = item.getElementsByTagName('yearpublished')[0]?.getAttribute('value') || '';
                      const id = item.getAttribute('id');
                      
                      games.push({
                          id: id,
                          name: name,
                          year: year
                      });
                  }
                  
                  return games;
              } catch (error) {
                  console.error('XML parsing error:', error);
                  return [];
              }
          }

          function showLoading(show) {
              const loading = document.getElementById('bgg-loading');
              if (show) {
                  loading.classList.remove('hidden');
              } else {
                  loading.classList.add('hidden');
              }
          }

          function displayBGGResults(games) {
              const resultsDiv = document.getElementById('bgg-results');
              
              if (games.length === 0) {
                  resultsDiv.innerHTML = '<p>No board games found with this barcode. You can still add the item manually.</p>';
                  resultsDiv.classList.remove('hidden');
                  return;
              }

              const gamesHtml = games.map(game => `
                  <div class="bgg-game" onclick="selectBGGGame('${game.name}', '${game.year}')">
                      <div class="bgg-game-name">${game.name}</div>
                      <div class="bgg-game-year">${game.year ? '(' + game.year + ')' : ''}</div>
                  </div>
              `).join('');

              resultsDiv.innerHTML = `
                  <p><strong>Found ${games.length} game(s):</strong></p>
                  ${gamesHtml}
                  <p style="font-size: 12px; margin-top: 10px; color: #666;">Tap a game to auto-fill the form</p>
              `;
              resultsDiv.classList.remove('hidden');
          }

          function selectBGGGame(name, year) {
              document.getElementById('title').value = name + (year ? ' (' + year + ')' : '');
              document.getElementById('category').value = 'boardgame';
              
              // Hide results
              document.getElementById('bgg-results').classList.add('hidden');
              
              // Focus on next field
              document.getElementById('condition').focus();
              
              alert('Game info loaded! Please fill in the remaining details.');
          }

          // Screen navigation
          function showScreen(screenId) {
              // Hide all screens
              document.querySelectorAll('.screen').forEach(screen => {
                  screen.classList.add('hidden');
              });
              
              // Show selected screen
              document.getElementById(screenId).classList.remove('hidden');
              
              // Update screen content
              if (screenId === 'home-screen') showItems();
              if (screenId === 'review') showReviewItems();
              if (screenId === 'inventory') showInventoryItems();
          }

          // Item management
          function saveItem() {
              const title = document.getElementById('title').value;
              const category = document.getElementById('category').value;
              const condition = document.getElementById('condition').value;
              const refPrice = parseFloat(document.getElementById('reference-price').value);
              const priceRule = parseInt(document.getElementById('price-rule').value);
              const finalPrice = parseFloat(document.getElementById('final-price').value);
              const stock = parseInt(document.getElementById('stock').value);
              const sold = parseInt(document.getElementById('sold').value) || 0;
              const notes = document.getElementById('notes').value;

              if (!title || !category || !condition || !refPrice || !finalPrice || !stock) {
                  alert('Please fill all required fields');
                  return;
              }

              const item = {
                  id: Date.now(),
                  title,
                  category,
                  condition,
                  referencePrice: refPrice,
                  priceRule,
                  finalPrice,
                  stock,
                  sold,
                  notes,
                  createdAt: new Date().toISOString()
              };

              items.push(item);
              saveData();
              clearForm();
              showScreen('home-screen');
              alert('Item saved successfully!');
          }

          function clearForm() {
              document.getElementById('barcode').value = '';
              document.getElementById('title').value = '';
              document.getElementById('category').value = '';
              document.getElementById('condition').value = '';
              document.getElementById('reference-price').value = '';
              document.getElementById('price-rule').value = '-50';
              document.getElementById('final-price').value = '';
              document.getElementById('stock').value = '';
              document.getElementById('sold').value = '0';
              document.getElementById('notes').value = '';
              
              // Reset BGG search
              document.getElementById('bgg-search-btn').disabled = true;
              document.getElementById('bgg-results').classList.add('hidden');
              document.getElementById('bgg-loading').classList.add('hidden');
          }

          function showItems() {
              const itemsList = document.getElementById('items-list');
              
              if (items.length === 0) {
                  itemsList.innerHTML = '<div class="empty-state">No items added yet. Tap + to add your first item!</div>';
                  return;
              }

              itemsList.innerHTML = items.map(item => `
                  <div class="item-card">
                      <div class="item-title">${item.title}</div>
                      <div class="item-details">
                          ${item.category} â€¢ ${item.condition} â€¢ â‚¬${item.finalPrice}<br>
                          Stock: ${item.stock} | Sold: ${item.sold}
                      </div>
                  </div>
              `).join('');
          }

          function showReviewItems() {
              const reviewList = document.getElementById('review-list');
              const reviewItems = items.filter(item => item.stock > 0);
              
              if (reviewItems.length === 0) {
                  reviewList.innerHTML = '<div class="empty-state">No items to review</div>';
                  return;
              }

              reviewList.innerHTML = reviewItems.map(item => `
                  <div class="item-card">
                      <div class="item-title">${item.title}</div>
                      <div class="item-details">
                          Price: â‚¬${item.referencePrice} â†’ â‚¬${item.finalPrice}<br>
                          Available: ${item.stock - item.sold} units
                      </div>
                  </div>
              `).join('');
          }

          function showInventoryItems() {
              const inventoryList = document.getElementById('inventory-list');
              
              if (items.length === 0) {
                  inventoryList.innerHTML = '<div class="empty-state">No inventory items</div>';
                  return;
              }

              const totalValue = items.reduce((sum, item) => sum + (item.finalPrice * item.stock), 0);
              
              inventoryList.innerHTML = `
                  <div class="item-card">
                      <div class="item-title">Total Inventory Value</div>
                      <div class="item-details">â‚¬${totalValue.toFixed(2)}</div>
                  </div>
                  ${items.map(item => `
                      <div class="item-card">
                          <div class="item-title">${item.title}</div>
                          <div class="item-details">
                              Stock: ${item.stock} | Value: â‚¬${(item.finalPrice * item.stock).toFixed(2)}
                          </div>
                      </div>
                  `).join('')}
              `;
          }

          function filterItems(searchText) {
              // This would filter items based on search text
              // For now, just show all items
              showItems();
          }

          // Export/Import functions
          function exportToSheets() {
              if (!settings.scriptUrl) {
                  alert('Please set Google Apps Script URL in settings first');
                  return;
              }
              
              // This would export to Google Sheets
              alert('Export to Google Sheets functionality - coming soon!');
          }

          function exportToJSON() {
              const dataStr = JSON.stringify(items, null, 2);
              const dataBlob = new Blob([dataStr], {type:'application/json'});
              
              // This would download the JSON file
              alert('Export to JSON - Data prepared!\n\nItems: ' + items.length);
          }

          function importFromJSON() {
              // This would import from JSON file
              alert('Import from JSON functionality - coming soon!');
          }

          // Settings
          function saveSettings() {
              settings.scriptUrl = document.getElementById('script-url').value;
              settings.imageQuality = parseInt(document.getElementById('image-quality').value);
              
              localStorage.setItem('bgcatalog_settings', JSON.stringify(settings));
              alert('Settings saved!');
              showScreen('home-screen');
          }

          // Data persistence
          function saveData() {
              localStorage.setItem('bgcatalog_items', JSON.stringify(items));
          }

          function loadData() {
              const savedItems = localStorage.getItem('bgcatalog_items');
              if (savedItems) {
                  items = JSON.parse(savedItems);
              }
              
              const savedSettings = localStorage.getItem('bgcatalog_settings');
              if (savedSettings) {
                  settings = JSON.parse(savedSettings);
                  document.getElementById('script-url').value = settings.scriptUrl || '';
                  document.getElementById('image-quality').value = settings.imageQuality || 80;
              }
          }
          EOF

      - name: Build APK (debug first)
        run: |
          cd bgcatalog-app
          cordova build android --debug
          
      - name: Find generated APKs
        run: |
          echo "Looking for APK files..."
          find bgcatalog-app -name "*.apk" -type f 2>/dev/null || echo "No APKs found"
          echo "Directory structure:"
          ls -la bgcatalog-app/platforms/android/app/build/outputs/ 2>/dev/null || echo "outputs directory not found"
          ls -la bgcatalog-app/platforms/android/app/build/outputs/apk/ 2>/dev/null || echo "apk directory not found"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            bgcatalog-app/platforms/android/app/build/outputs/apk/**/*.apk
            bgcatalog-app/platforms/android/app/build/outputs/apk/debug/*.apk
            bgcatalog-app/**/*.apk
          if-no-files-found: warn
